/**
 * Auto-generate room registry from all JSON files in public directory
 * Run with: node scripts/generate-room-registry.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get project root (one level up from scripts/)
const projectRoot = path.resolve(__dirname, '..');
const publicDir = path.join(projectRoot, 'public');

// Helper to convert filename to room ID (kebab-case with tier)
function filenameToRoomId(filename) {
  // Remove .json extension
  const base = filename.replace(/\.json$/i, '');
  
  // Convert to kebab-case and normalize tier suffix
  return base
    .toLowerCase()
    .replace(/[_\s]+/g, '-') // underscores and spaces to hyphens
    .replace(/-(free|vip1|vip2|vip3)$/i, (match) => match.toLowerCase()); // normalize tier
}

// Helper to extract display names from JSON
function extractNames(jsonPath) {
  try {
    const content = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
    
    // Try various name field patterns
    const nameEn = content.name || content.nameEn || content.title?.en || 'Unknown Room';
    const nameVi = content.name_vi || content.nameVi || content.title?.vi || nameEn;
    
    return { nameEn, nameVi };
  } catch (err) {
    console.warn(`Warning: Could not parse ${jsonPath}:`, err.message);
    return null;
  }
}

// Scan public directory for JSON files
function scanRoomFiles() {
  const files = fs.readdirSync(publicDir);
  const roomFiles = files.filter(f => f.endsWith('.json') && !f.startsWith('.'));
  
  const manifest = {};
  const dataImports = {};
  
  for (const filename of roomFiles) {
    const roomId = filenameToRoomId(filename);
    const jsonPath = path.join(publicDir, filename);
    const names = extractNames(jsonPath);
    
    if (!names) continue;
    
    // Extract tier from roomId
    let tier = 'free';
    if (roomId.endsWith('-vip1')) tier = 'vip1';
    else if (roomId.endsWith('-vip2')) tier = 'vip2';
    else if (roomId.endsWith('-vip3')) tier = 'vip3';
    
    // Add to manifest
    manifest[roomId] = filename;
    
    // Add to dataImports
    dataImports[roomId] = {
      id: roomId,
      nameEn: names.nameEn,
      nameVi: names.nameVi,
      tier,
      hasData: true
    };
  }
  
  return { manifest, dataImports };
}

// Generate manifest file
function generateManifest(manifest) {
  const content = `/**
 * AUTO-GENERATED: Do not edit manually
 * Generated by: scripts/generate-room-registry.js
 * Run: node scripts/generate-room-registry.js
 */
export const PUBLIC_ROOM_MANIFEST: Record<string, string> = ${JSON.stringify(manifest, null, 2)};

/**
 * Get all unique room base names (without tier suffix)
 */
export function getRoomBaseNames(): string[] {
  const baseNames = new Set<string>();
  
  for (const roomId of Object.keys(PUBLIC_ROOM_MANIFEST)) {
    const baseName = roomId.replace(/-(free|vip1|vip2|vip3)$/, '');
    baseNames.add(baseName);
  }
  
  return Array.from(baseNames).sort();
}

/**
 * Get all tiers available for a room base name
 */
export function getAvailableTiers(roomBaseName: string): string[] {
  const tiers: string[] = [];
  
  for (const tier of ['free', 'vip1', 'vip2', 'vip3']) {
    const roomId = \`\${roomBaseName}-\${tier}\`;
    if (PUBLIC_ROOM_MANIFEST[roomId]) {
      tiers.push(tier);
    }
  }
  
  return tiers;
}
`;
  
  const manifestPath = path.join(projectRoot, 'src', 'lib', 'roomManifest.ts');
  fs.writeFileSync(manifestPath, content, 'utf8');
  console.log(`‚úÖ Generated roomManifest.ts with ${Object.keys(manifest).length} rooms`);
}

// Generate dataImports file
function generateDataImports(dataImports) {
  const entries = Object.entries(dataImports).map(([key, value]) => {
    return `  "${key}": ${JSON.stringify(value, null, 4).replace(/\n/g, '\n  ')}`;
  }).join(',\n');
  
  const content = `/**
 * AUTO-GENERATED: Do not edit manually
 * Generated by: scripts/generate-room-registry.js
 * Run: node scripts/generate-room-registry.js
 */
import { RoomData } from "@/lib/roomData";

export const roomDataMap: Record<string, RoomData> = {
${entries}
};
`;
  
  const importsPath = path.join(projectRoot, 'src', 'lib', 'roomDataImports.ts');
  fs.writeFileSync(importsPath, content, 'utf8');
  console.log(`‚úÖ Generated roomDataImports.ts with ${Object.keys(dataImports).length} rooms`);
}

// Main execution
try {
  console.log('üîç Scanning for room JSON files...');
  const { manifest, dataImports } = scanRoomFiles();
  
  console.log(`üì¶ Found ${Object.keys(manifest).length} room files`);
  
  generateManifest(manifest);
  generateDataImports(dataImports);
  
  console.log('‚ú® Room registry generation complete!');
} catch (err) {
  console.error('‚ùå Error generating room registry:', err);
  process.exit(1);
}
